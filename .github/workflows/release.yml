name: Release

on:
    push:
        branches:
            - main
            - master
        paths-ignore:
            - 'README.md'
            - 'docs/**'
            - '.gitignore'
            - 'LICENSE'
    workflow_dispatch:
        inputs:
            release_type:
                description: 'Release type (patch, minor, major)'
                required: true
                default: 'patch'
                type: choice
                options:
                    - patch
                    - minor
                    - major

jobs:
    release:
        runs-on: ubuntu-latest

        permissions:
            contents: write
            issues: write
            pull-requests: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: latest

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'pnpm'

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.x'

            - name: Install Node.js dependencies
              run: pnpm install --frozen-lockfile

            - name: Install Python dependencies
              run: pip install -r requirements.txt

            - name: Run tests (if available)
              run: |
                  if [ -f "package.json" ] && grep -q '"test"' package.json; then
                    pnpm test
                  else
                    echo "No tests found, skipping..."
                  fi

            - name: Build plugin
              run: pnpm run build

            - name: Create release package
              run: |
                  mkdir -p release

                  # Copy built JavaScript files
                  cp -r .millennium release/

                  # Copy backend
                  cp -r backend release/

                  # Copy styles as static folder (rename styles to static)
                  cp -r styles release/static

                  # Copy configuration files
                  cp plugin.json release/
                  cp requirements.txt release/
                  cp README.md release/
                  cp LICENSE release/ 2>/dev/null || echo "No LICENSE file"

                  # Get version from package.json for zip name
                  VERSION=$(node -p "require('./package.json').version")

                  # Create zip package
                  cd release
                  zip -r "../csstats-extension-v${VERSION}.zip" .
                  cd ..

            - name: Semantic Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: npx semantic-release
